// If we don't have at least C11, then make new keywords vanish
// so older compilers still work (notably MSVC))
#if !defined(__STDC_VERSION__) || __STDC_VERSION__ < 201112L
#define restrict
#define _Noreturn
#endif

// va_list as in stdarg.h
typedef char* va_list;

// size_t as in stddef.h
#ifdef _WIN64
typedef unsigned long long size_t;
#else
typedef unsigned int size_t;
#endif

// as in sys/types.h
typedef long long off_t;

[MSVCRT]
// An object type capable of recording all the information needed to control a stream
typedef struct _FILE
{
    int reserved;
} FILE;

// a complete object type other than an array type capable of recording
// all the information needed to specify uniquely every position within a file
typedef long long fpos_t;

// Null as in stddef.h
#ifndef NULL
#ifndef __cplusplus
#define NULL ((void*) 0)
#else
#define NULL 0
#endif
#endif

// used for third argument to setvbuf
#define _IOFBF 1
#define _IOLBF 2
#define _IONBF 3

// size of buffer in setbuf
#define BUFSIZ 2048

// end-of-file constant
#define EOF -1

// minimum number of files that the implementation guarantees can be open simultaneously
#define FOPEN_MAX 32

// the longest file name string that the implementation guarantees can be opened
#define FILENAME_MAX 1024

// large enough to hold a temporary file name string generated by the tmpnam function
#define L_tmpnam 1024

// used for the third argument to fseek
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

// minimum number of unique file names that can be generated by the tmpnam function
// POSIX: XSI-conformant systems, the value of TMP_MAX is at least 10000.
#define TMP_MAX 256

extern FILE* stderr;
extern FILE* stdin;
extern FILE* stdout;

[CDECL]

// 7.21.4.1
[CARP remove()]int remove(const char *filename);

// 7.21.4.2
[CARP rename()]int rename(const char *old, const char *new);

// 7.21.4.3
[CARP tmpfile()]FILE *tmpfile(void);

// 7.21.4.4
[CARP tmpnam()]char *tmpnam(char *s);

// 7.21.5.1
[CARP fclose()]int fclose(FILE *stream);

// 7.21.5.2
[CARP fflush()]int fflush(FILE *stream);

// 7.21.5.3
[CARP fopen()]FILE *fopen(const char * restrict filename, const char * restrict mode);

// 7.21.5.4
[CARP freopen()]FILE *freopen(const char * restrict filename, const char * restrict mode, FILE * restrict stream);

// 7.21.5.5
[CARP setbuf()]void setbuf(FILE * restrict stream, char * restrict buf);

// 7.21.5.6
[CARP setvbuf()]int setvbuf(FILE * restrict stream, char * restrict buf, int mode, size_t size);

// 7.21.6.1
[CARP fprintf()]int fprintf(FILE * restrict stream, const char * restrict format, ...);

// 7.21.6.2
[CARP fscanf()]int fscanf(FILE * restrict stream, const char * restrict format, ...);

// 7.21.6.3
[CARP printf()]int printf(const char * restrict format, ...);

// 7.21.6.4
[CARP scanf()]int scanf(const char * restrict format, ...);

// 7.21.6.5
[CARP snprintf()]int snprintf(char * restrict s, size_t n, const char * restrict format, ...);

// 7.21.6.6
[CARP sprintf()]int sprintf(char * restrict s, const char * restrict format, ...);

// 7.21.6.7
[CARP sscanf()]int sscanf(const char * restrict s, const char * restrict format, ...);

// 7.21.6.8
[CARP vfprintf()]int vfprintf(FILE * restrict stream, const char * restrict format, va_list arg);

// 7.21.6.9
[CARP vfscanf()]int vfscanf(FILE * restrict stream, const char * restrict format, va_list arg);

// 7.21.6.10
[CARP vprintf()]int vprintf(const char * restrict format, va_list arg);

// 7.21.6.11
[CARP vscanf()]int vscanf(const char * restrict format, va_list arg);

// 7.21.6.12
[CARP vsnprintf()]int vsnprintf(char * restrict s, size_t n, const char * restrict format, va_list arg);

// 7.21.6.13
[CARP vsprintf()]int vsprintf(char * restrict s, const char * restrict format, va_list arg);

// 7.21.6.14
[CARP vsscanf()]int vsscanf(const char * restrict s, const char * restrict format, va_list arg);

// 7.21.7.1
[CARP fgetc()]int fgetc(FILE *stream);

// 7.21.7.2
[CARP fgets()]char *fgets(char * restrict s, int n, FILE * restrict stream);

// 7.21.7.3
[CARP fputc()]int fputc(int c, FILE *stream);

// 7.21.7.4
[CARP fputs()]int fputs(const char * restrict s, FILE * restrict stream);

// 7.21.7.5
[CARP getc()]int getc(FILE *stream);

// 7.21.7.6
[CARP getchar()]int getchar(void);

// 7.21.7.7
[CARP putc()]int putc(int c, FILE *stream);

// 7.21.7.8
[CARP putchar()]int putchar(int c);

// 7.21.7.9
[CARP puts()]int puts(const char *s);

// 7.21.7.10
[CARP ungetc()]int ungetc(int c, FILE *stream);

// 7.21.8.1
[CARP fread()]size_t fread(void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream);

// 7.21.8.2
[CARP fwrite()]size_t fwrite(const void * restrict ptr, size_t size, size_t nmemb, FILE * restrict stream);

// 7.21.9.1
[CARP fgetpos()]int fgetpos(FILE * restrict stream, fpos_t * restrict pos);

// 7.21.9.2
[CARP fseek()]int fseek(FILE *stream, long int offset, int whence);

// 7.21.9.3
[CARP fsetpos()]int fsetpos(FILE *stream, const fpos_t *pos);

// 7.21.9.4
[CARP ftell()]long int ftell(FILE *stream);

// 7.21.9.5
[CARP rewind()]void rewind(FILE *stream);

// 7.21.10.1
[CARP clearerr()]void clearerr(FILE *stream);

// 7.21.10.2
[CARP feof()]int feof(FILE *stream);

// 7.21.10.3
[CARP ferror()]int ferror(FILE *stream);

// 7.21.10.4
[CARP perror()]void perror(const char *s);

[/CDECL]
[/MSVCRT]

[POSIX]
// size_t as in sys/types.h
#ifdef _WIN64
typedef long long ssize_t;
#else
typedef int ssize_t;
#endif

// [CX] Maximum size of character array to hold ctermid() output.
#define L_ctermid 1024

// Default directory prefix for tempnam().
extern char* P_tmpdir;

[CDECL]

[CARP ctermid()]char* ctermid(char *s);
[CARP dprintf()]int dprintf(int fildes, const char* restrict format, ...);

[CARP flockfile()]void flockfile(FILE* file);
[CARP ftrylockfile()]int ftrylockfile(FILE* file);
[CARP funlockfile()]void funlockfile(FILE* file);

[CARP fmemopen()]FILE* fmemopen(void* restrict buf, size_t size, const char* restrict mode);
[CARP fseeko()]int fseeko(FILE *stream, off_t offset, int whence);
[CARP ftello()]off_t ftello(FILE *stream);

[CARP getc_unlocked()]int getc_unlocked(FILE *stream);
[CARP getchar_unlocked()]int getchar_unlocked(void);
[CARP putc_unlocked()]int putc_unlocked(int c, FILE *stream);
[CARP putchar_unlocked()]int putchar_unlocked(int c);

[CARP getdelim()]ssize_t getdelim(char ** restrict lineptr, size_t* restrict n, int delimiter, FILE* restrict stream);
[CARP getline()]ssize_t getline(char** restrict lineptr, size_t* restrict n, FILE* restrict stream);

[CARP open_memstream()]FILE *open_memstream(char **bufp, size_t *sizep);

[CARP pclose()]int pclose(FILE *stream);
[CARP popen()]FILE *popen(const char *command, const char *mode);

[CARP renameat()]int renameat(int oldfd, const char* old, int newfd, const char* new);

[CARP vdprintf()]int vdprintf(int fildes, const char* restrict format, va_list ap);

[Glibc]
typedef long long off64_t;

[CARP fseeko64()]int fseeko64(FILE *stream, off64_t offset, int whence);
[CARP ftello64()]off64_t ftello64(FILE *stream);

[/CDECL]
